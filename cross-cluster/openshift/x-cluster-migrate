#!/bin/bash

export APPLY_LOCAL_SETTINGS=1

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :n:r:b: FLAG; then
    case ${FLAG} in
      # List of local options:
      n) PROJECT_NAMESPACE=$OPTARG ;;
      r) GIT_URI=$OPTARG ;;
      b) GIT_REF=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------

# An empty settings.local.sh is required for the scripts to run correctly during the first run.
# If no settings.local.sh is provided, the initialization above will fail due to 
# the environment variable APPLY_LOCAL_SETTING set to 1.
# Similarly, if the environment variable is not set, the initialize script will NOT
# correctly create the local settings file
touch settings.local.sh



_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
_overrides="overrides.inc"


if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_overrides} ]; then
    . ${OCTOOLSBIN}/${_overrides}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi


usage () {
  cat <<-EOF

  A script to automate and manage the migration of files from one PVC to another across OCP clusters.

  Steps:
    - Initialize the PVC migrator environment using the 'init' command.
    - Deploy the build configuration using the 'build' command.
    - Migrate your PVC(s) using the 'migrate' command.
    - Remove the PVC migrator components from your environment(s) using the 'clean' command.

  Usage:
    $0 [options] [commands]

  Examples:
    $0 -n devex-von-image init
    $0 -n devex-von-image -r https://github.com/WadeBarnes/StorageMigration.git init

    $0 -e tools migrate jenkins jenkins-data gluster-block 5Gi

  Options:
  ========
    -n Project namespace, the name of the target project minus the environment suffix (-tool, -dev, -test, -prod).
       Used by the 'init' command to set the target project for all subsequent operations.

    -r Optional - GitHub repository URL
       Used by the 'init' command to set the GitHub for repository for all subsequent build operations.
       Only used for build operations to redirect the source repository to another fork.

    -b Optional - Git Branch
       Used by the 'init' command to set the branch of the repository for all subsequent build operations.
       Only used for build operations to redirect the source repository to another branch of a fork.

  Commands:
  ========
    init
      - Initialize the PVC migrator environment for your project environment.
        Specify your project namespace using the -n option.

    build
      - Deploy the PVC migrator build configuration.

    migrate <hostPodName> <pvcName> <pvcType> <pvcSize>
      - Migrate files from one PVC to another of the same name.
        Good for migrating from one storage class to another, or to a new PVC of a different size.

      - Required parameters:
        - hostPodName: The friendly name of the host pod.  Typically, this is the same as the deployment configuration name.
        - pvcName: The name of the PVC to be migrated.
        - pvcType: The PVC class to use for the new PVC.  One of gluster-file, gluster-block, or gluster-file-db.
        - pvcSize: The size, in Gi, for the new PVC, e.g. 1Gi, 2Gi, 5Gi

EOF
}

deploymentEnvNameSet() {
  echo "${DEPLOYMENT_ENV_NAME}"
  if [ ! -z "${DEPLOYMENT_ENV_NAME}" ]; then
    return 0
  else
    return 1
  fi
}

projectNamespaceSet() {
  if [ ! -z "${PROJECT_NAMESPACE}" ] && [ "bcgov" != "${PROJECT_NAMESPACE}" ]; then
    return 0
  else
    return 1
  fi
}

requireProjectNamespace(){
  _red='\033[0;31m'
  _nc='\033[0m' # No Color

  # Deployment Environment Name
  if ! projectNamespaceSet; then
    echo
    echo -e "${_red}You MUST specify a project namespace using the '-n' flag.${_nc}"
    globalUsage
    exit 1
  fi
}

requireDevelopmentEnvName(){
  _red='\033[0;31m'
  _nc='\033[0m' # No Color

  # Deployment Environment Name
  if ! deploymentEnvNameSet; then
    echo
    echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
    echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
    globalUsage
    exit 1
  fi
}

updateMigratorDeplymentParams() {
  (
    _sourcePvc=${1}
    _targetPvc=${2}
    _remoteCluster=${3}
    _remoteProject=${4}
    _sourceCluster=${5}
    _destCluster=${6}
    _paramFiles=(${7})

    _parameterFilters="/SOURCE_PVC/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/DESTINATION_PVC/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/REMOTE_CLUSTER/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/REMOTE_PROJECT/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/NAMESPACE_NAME/s~^#.~~;"
    _parameterFilters="${_parameterFilters}s~\(^SOURCE_PVC=\).*$~\1${_sourcePvc}~;"
    _parameterFilters="${_parameterFilters}s~\(^DESTINATION_PVC=\).*$~\1${_targetPvc}~;"
    _parameterFilters="${_parameterFilters}s~\(^REMOTE_CLUSTER=\).*$~\1https://${_remoteCluster}~;"
    _parameterFilters="${_parameterFilters}s~\(^REMOTE_PROJECT=\).*$~\1${_remoteProject}~;"

    _sourceParameterFilters="${_parameterFilters}s~\(^NAMESPACE_NAME=\).*$~\1${_sourceCluster}~;"
    _destParameterFilters="${_parameterFilters}s~\(^NAMESPACE_NAME=\).*$~\1${_destCluster}~;"
    

    for _paramFile in "${_paramFiles[@]}"
    do
      # check if we're using source or destination param file
      _filters=${_parameterFilters}
      if [[ ${_paramFile} == *".nsp-source."* ]]; then
        _filters=${_sourceParameterFilters}
      elif [[ ${_paramFile} == *".nsp-target."* ]]; then
        _filters=${_destParameterFilters}
      fi
      cat ${_paramFile} | sed ${_filters} > ${_paramFile}.tmp
      rm ${_paramFile}
      mv ${_paramFile}.tmp ${_paramFile}
    done
  )
}

initialize(){
  echo -e "\nInitializing environment settings ...\n"

  # Write a local settings file ...
  echo "Writing local settings file (settings.local.sh) ..."
  echo "export GIT_URI=${GIT_URI}" > settings.local.sh
  echo "export GIT_REF=${GIT_REF}" >> settings.local.sh

  oc config get-contexts | sed 's/*/ /g' | awk '{print $1}' | sed '1 d'
  printStatusMsg "Please enter your destination cluster from the list above:"
  read DST_CONTEXT
  echo "export DST_CONTEXT=${DST_CONTEXT}" >> settings.local.sh

  printStatusMsg "Is your destination cluster on OpenShift Platform 4? (yes/no):"
  read DST_OCP4_RESP
  if [ "${DST_OCP4_RESP}" = "yes" ]; then 
    DST_OCP4=true 
  else 
    DST_OCP4=false 
  fi
  echo "export DST_OCP4=${DST_OCP4}" >> settings.local.sh

  printStatusMsg "Please enter your source cluster from the list above:"
  read SRC_CONTEXT
  echo "export SRC_CONTEXT=${SRC_CONTEXT}" >> settings.local.sh

  printStatusMsg "Is your source cluster on OpenShift Platform 4? (yes/no):"
  read SRC_OCP4_RESP
  if [ "${SRC_OCP4_RESP}" = "yes" ]; then 
    SRC_OCP4=true 
  else 
    SRC_OCP4=false 
  fi
  echo "export SRC_OCP4=${SRC_OCP4}" >> settings.local.sh

  printStatusMsg "Please enter your source PVC"
  read SRC_PVC
  echo "export SRC_PVC=${SRC_PVC}" >> settings.local.sh

  printStatusMsg "Please enter your destination PVC"
  read DST_PVC
  echo "export DST_PVC=${DST_PVC}" >> settings.local.sh

  REMOTE_CLUSTER=$(echo ${DST_CONTEXT} | awk 'BEGIN { FS = "/" } ; { print $2 }' )
  REMOVE_PROJECT=${DST_CLUSTER}
  DST_CLUSTER=$(echo ${DST_CONTEXT} | awk 'BEGIN { FS = "/" } ; { print $1 }' )
  SRC_CLUSTER=$(echo ${SRC_CONTEXT} | awk 'BEGIN { FS = "/" } ; { print $1 }' )
  DEPLOYMENT_ENV_NAME=$(echo ${SRC_CLUSTER} | sed 's/.*-//g')
  echo "
export REMOTE_CLUSTER=${REMOTE_CLUSTER}
export REMOTE_PROJECT=${REMOVE_PROJECT}
export DST_CLUSTER=${DST_CLUSTER}
export SRC_CLUSTER=${SRC_CLUSTER}
export DEPLOYMENT_ENV_NAME=${DEPLOYMENT_ENV_NAME}
  " >> settings.local.sh

  echo "Generating local param files ..."
  genTemplateParams.sh -lf -p default

  # rename files to correct profile
  SRC_PARAM_NAME="./templates/source-pvc-migrator/source-pvc-migrator-deploy.source.local.param"
  DST_PARAM_NAME="./templates/target-pvc-migrator/target-pvc-migrator-deploy.target.local.param"

  mv "./templates/source-pvc-migrator/source-pvc-migrator-deploy.local.param" "${SRC_PARAM_NAME}"
  mv "./templates/target-pvc-migrator/target-pvc-migrator-deploy.local.param" "${DST_PARAM_NAME}"

  SRC_NSP_PARAM_NAME="./templates/nsp/pvc-migrator-nsp-deploy.nsp-source.local.param"
  DST_NSP_PARAM_NAME="./templates/nsp/pvc-migrator-nsp-deploy.nsp-target.local.param"

  cp "./templates/nsp/pvc-migrator-nsp-deploy.local.param" "${SRC_NSP_PARAM_NAME}"
  cp "./templates/nsp/pvc-migrator-nsp-deploy.local.param" "${DST_NSP_PARAM_NAME}"
  rm "./templates/nsp/pvc-migrator-nsp-deploy.local.param"

  updateMigratorDeplymentParams ${SRC_PVC} ${DST_PVC} ${REMOTE_CLUSTER} ${REMOTE_PROJECT} ${SRC_CLUSTER} ${DST_CLUSTER} "${SRC_PARAM_NAME} ${DST_PARAM_NAME} ${SRC_NSP_PARAM_NAME} ${DST_NSP_PARAM_NAME}"
}

deployToCluster(){
  _context=${1}
  _cluster=${2}
  _isOCP4=${3}
  _profile=${4}

  # make sure we're using the destination context
  printStatusMsg "Switching to ${_profile} cluster"
  oc config use-context ${_context}

  if [ ${_profile} = "source" ]; then
    oc apply -n ${_cluster} -f ./tmp.secret
    oc label secret x-cluster-test base=xc-pvc-migrator -n ${_cluster}
  fi

  #build NSP
  if [ ! -z ${_isOCP4} ] && [ "${_isOCP4}" = "true" ]; then
    #need to reload the settings for nsp
    unset SETTINGS_LOADED
    genDepls.sh -p "nsp-${_profile}" -n ${_cluster}
  fi
  
  # regenerate settings for deployment
  unset SETTINGS_LOADED
  genDepls.sh -p "${_profile}" -n "${_context}"

  printStatusMsg "Monitor the deployment in ${_cluster} console and press ENTER after it completes:"
  read

}


targetDeploy(){
  _context=${1}
  _cluster=${2}
  _isOCP4=${3}
  
  deployToCluster ${_context} ${_cluster} ${_isOCP4} "target"

  MIG_TOKEN_SECRET=`oc get secret | grep target-pvc-migrator-token | head -1 | awk '{print $1}'`

  # Use token value to generate local temp secret
  oc create secret generic x-cluster-test --from-literal=token=`oc get secret ${MIG_TOKEN_SECRET} -o json | jq -r .data.token | base64 -d` --dry-run -o json > tmp.secret
}

sourceDeploy(){
  _context=${1}
  _contextDst=${2}
  _cluster=${3}
  _isOCP4=${4}
  #swtich to source cluster -------------------
  printStatusMsg "Switching to destiantion cluster"
  oc config use-context ${_contextDst}

  #grab the target pod name
  MIG_POD_TARGET=$(oc get pods | grep target-pvc-migrator | awk '{print $1}')

  deployToCluster ${_context} ${_cluster} ${_isOCP4} "source"

  MIG_POD=$(oc get pods | grep source-pvc-migrator | awk '{print $1}')

  #runInContainer doesn't allow us to specify -n or our env, we have to use this instead
  oc exec -n ${_cluster} -it "${MIG_POD}" -- bash -c "cd /source; oc rsync --compress=true --kubeconfig=/target/tkube/KUBECONFIG . ${MIG_POD_TARGET}:/target"
}

migrate(){
  if [ ! -z ${PROFILE} ] && [ "${PROFILE}" = "target" ]; then
    targetDeploy ${DST_CONTEXT} ${DST_CLUSTER} ${DST_OCP4}
  elif [ ! -z ${PROFILE} ] && [ "${PROFILE}" = "source" ]; then
    sourceDeploy ${SRC_CONTEXT} ${DST_CONTEXT} ${SRC_CLUSTER} ${SRC_OCP4}
  else
    printStatusMsg "Please either specifiy target or source profile"
    exit
  fi
}

cleanEnv(){
  if [ ! -z ${PROFILE} ] && [ "${PROFILE}" = "target" ]; then
    CONTEXT=${DST_CONTEXT}
  elif [ ! -z ${PROFILE} ] && [ "${PROFILE}" = "source" ]; then
    CONTEXT=${SRC_CONTEXT}
  else
    printStatusMsg "Please either specifiy target or source profile"
    exit
  fi

  printStatusMsg "Cleaning secrets, deployments, builds, etc"

  # make sure we're using the destination context
  printStatusMsg "Switching to destination cluster"
  oc config use-context ${CONTEXT}

  oc delete -l base=xc-pvc-migrator deployment,sa,rolebinding,secret
  oc delete -l app=pvc-migrator build,buildconfig,is
  oc delete -l app=pvc-migrator-nsp nsp

  if [ -f "tmp.secret" ] && [ "${PROFILE}" = "target" ]; then
    rm "tmp.secret"
  fi
}


# pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  init)
    # requireProjectNamespace
    initialize
    ;;
  migrate)
    requireDevelopmentEnvName
    migrate
    ;;
  clean)
    requireDevelopmentEnvName
    cleanEnv
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac


#!/bin/bash
usage () {
  cat <<-EOF

  A script to automate and manage the migration of files from one PVC to another across OCP clusters.

  Steps:
    - Make sure your PVC migrator has been built on some namespace in the source and target cluster.
    - Initialize the PVC migrator environment using the 'init' command and tweak param files to point to your PVC migrator builds.
    - Migrate your PVC(s) using the 'migrate' command.
    - Remove the PVC migrator components from your environment(s) using the 'clean' command.

  Usage:
    $0 [options] [commands]

  Examples:
    $0 init
    $0 migrate
    $0 clean

  Commands:
  ========
    init
      - Initialize the PVC migrator environment for your project environment.
        Specify your project namespace using the -n option.

    clean
      - Cleans out the namespace associated with the profile. Removes all NSPs, deployment configs, etc created by the 
        migration

    migrate
      - Deploy the migration container and run the required steps for cross-cluster migration in the relevant cluster

EOF
}

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export APPLY_LOCAL_SETTINGS=1
# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :n:r:b: FLAG; then
    case ${FLAG} in
      # List of local options:
      n) PROJECT_NAMESPACE=$OPTARG ;;
      r) GIT_URI=$OPTARG ;;
      b) GIT_REF=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------

# An empty settings.local.sh is required for the scripts to run correctly during the first run.
# If no settings.local.sh is provided, the initialization above will fail due to 
# the environment variable APPLY_LOCAL_SETTING set to 1.
# Similarly, if the environment variable is not set, the initialize script will NOT
# correctly create the local settings file
touch settings.local.sh


_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
_overrides="overrides.inc"


if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_overrides} ]; then
    . ${OCTOOLSBIN}/${_overrides}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi




deploymentEnvNameSet() {
  echo "${DEPLOYMENT_ENV_NAME}"
  if [ ! -z "${DEPLOYMENT_ENV_NAME}" ]; then
    return 0
  else
    return 1
  fi
}

projectNamespaceSet() {
  if [ ! -z "${PROJECT_NAMESPACE}" ] && [ "bcgov" != "${PROJECT_NAMESPACE}" ]; then
    return 0
  else
    return 1
  fi
}

requireProjectNamespace(){
  _red='\033[0;31m'
  _nc='\033[0m' # No Color

  # Deployment Environment Name
  if ! projectNamespaceSet; then
    echo
    echo -e "${_red}You MUST specify a project namespace using the '-n' flag.${_nc}"
    globalUsage
    exit 1
  fi
}

requireDevelopmentEnvName(){
  _red='\033[0;31m'
  _nc='\033[0m' # No Color

  # Deployment Environment Name
  if ! deploymentEnvNameSet; then
    echo
    echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
    echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
    globalUsage
    exit 1
  fi
}

updateMigratorDeplymentParams() {
  (
    _sourcePvc=${1}
    _targetPvc=${2}
    _remoteCluster=${3}
    _remoteProject=${4}
    _sourceCluster=${5}
    _destCluster=${6}
    _paramFiles=(${7})

    _destTools=$(echo ${_destCluster} | sed 's/-[[:alnum:]]*$//g')-tools
    _sourceTools=$(echo ${_sourceCluster} | sed 's/-[[:alnum:]]*$//g')-tools

    _parameterFilters="/SOURCE_PVC/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/DESTINATION_PVC/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/REMOTE_CLUSTER/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/REMOTE_PROJECT/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/NAMESPACE_NAME/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/DST_IMAGE_NAMESPACE/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/SRC_IMAGE_NAMESPACE/s~^#.~~;"
    _parameterFilters="${_parameterFilters}s~\(^SOURCE_PVC=\).*$~\1${_sourcePvc}~;"
    _parameterFilters="${_parameterFilters}s~\(^DESTINATION_PVC=\).*$~\1${_targetPvc}~;"
    _parameterFilters="${_parameterFilters}s~\(^REMOTE_CLUSTER=\).*$~\1https://${_remoteCluster}~;"
    _parameterFilters="${_parameterFilters}s~\(^REMOTE_PROJECT=\).*$~\1${_remoteProject}~;"
    _parameterFilters="${_parameterFilters}s~\(^DST_IMAGE_NAMESPACE=\).*$~\1${_destTools}~;"
    _parameterFilters="${_parameterFilters}s~\(^SRC_IMAGE_NAMESPACE=\).*$~\1${_sourceTools}~;"

    _sourceParameterFilters="${_parameterFilters}s~\(^NAMESPACE_NAME=\).*$~\1${_sourceCluster}~;"
    _destParameterFilters="${_parameterFilters}s~\(^NAMESPACE_NAME=\).*$~\1${_destCluster}~;"
    

    for _paramFile in "${_paramFiles[@]}"
    do
      # check if we're using source or destination param file
      _filters=${_parameterFilters}
      if [[ ${_paramFile} == *".nsp-source."* ]]; then
        _filters=${_sourceParameterFilters}
      elif [[ ${_paramFile} == *".nsp-target."* ]]; then
        _filters=${_destParameterFilters}
      fi
      cat ${_paramFile} | sed ${_filters} > ${_paramFile}.tmp
      rm ${_paramFile}
      mv ${_paramFile}.tmp ${_paramFile}
    done
  )
}

initialize(){
  echo -e "\nInitializing environment settings ...\n"

  # Write a local settings file ...
  echo "Writing local settings file (settings.local.sh) ..."
  echo "export GIT_URI=${GIT_URI}" > settings.local.sh
  echo "export GIT_REF=${GIT_REF}" >> settings.local.sh

  oc config get-contexts | sed 's/*/ /g' | awk '{print $1}' | sed '1 d'
  printStatusMsg "Please enter your destination cluster from the list above:"
  read DST_CONTEXT
  echo "export DST_CONTEXT=${DST_CONTEXT}" >> settings.local.sh

  # printStatusMsg "Is your destination cluster on OpenShift Platform 4? (yes/no):"
  # read DST_OCP4_RESP
  # if [ "${DST_OCP4_RESP}" = "yes" ]; then 
  #   DST_OCP4=true 
  # else 
  #   DST_OCP4=false 
  # fi
  # echo "export DST_OCP4=${DST_OCP4}" >> settings.sh

  printStatusMsg "Please enter your source cluster from the list above:"
  read SRC_CONTEXT
  echo "export SRC_CONTEXT=${SRC_CONTEXT}" >> settings.local.sh

  # printStatusMsg "Is your source cluster on OpenShift Platform 4? (yes/no):"
  # read SRC_OCP4_RESP
  # if [ "${SRC_OCP4_RESP}" = "yes" ]; then 
  #   SRC_OCP4=true 
  # else 
  #   SRC_OCP4=false 
  # fi
  # echo "export SRC_OCP4=${SRC_OCP4}" >> settings.sh

  printStatusMsg "Please enter your source PVC"
  read SRC_PVC
  echo "export SRC_PVC=${SRC_PVC}" >> settings.local.sh

  printStatusMsg "Please enter your destination PVC"
  read DST_PVC
  echo "export DST_PVC=${DST_PVC}" >> settings.local.sh

  REMOTE_CLUSTER=$(echo ${DST_CONTEXT} | awk 'BEGIN { FS = "/" } ; { print $2 }' | sed 's/-/./g' )
  DST_CLUSTER=$(echo ${DST_CONTEXT} | awk 'BEGIN { FS = "/" } ; { print $1 }' )
  REMOVE_PROJECT=${DST_CLUSTER}
  SRC_CLUSTER=$(echo ${SRC_CONTEXT} | awk 'BEGIN { FS = "/" } ; { print $1 }' )
  DEPLOYMENT_ENV_NAME=$(echo ${SRC_CLUSTER} | sed 's/.*-//g')
  echo "
export REMOTE_CLUSTER=${REMOTE_CLUSTER}
export REMOTE_PROJECT=${REMOVE_PROJECT}
export DST_CLUSTER=${DST_CLUSTER}
export SRC_CLUSTER=${SRC_CLUSTER}
export DEPLOYMENT_ENV_NAME=${DEPLOYMENT_ENV_NAME}
  " >> settings.local.sh

  echo "Generating param files ..."
  genTemplateParams.sh -lf -p default

  # rename files to correct profile
  SRC_PARAM_NAME="./templates/source-pvc-migrator/source-pvc-migrator-deploy.local.param"
  DST_PARAM_NAME="./templates/target-pvc-migrator/target-pvc-migrator-deploy.local.param"

  

  updateMigratorDeplymentParams ${SRC_PVC} ${DST_PVC} ${REMOTE_CLUSTER} ${REMOTE_PROJECT} ${SRC_CLUSTER} ${DST_CLUSTER} "${SRC_PARAM_NAME} ${DST_PARAM_NAME}"
}

deployToCluster(){
  _context=${1}
  _cluster=${2}
  _profile=${3}

  # make sure we're using the destination context
  printStatusMsg "Switching to ${_profile} cluster"
  oc config use-context ${_context}

  if [ ${_profile} = "source" ]; then
    oc apply -n ${_cluster} -f ./tmp.secret
    oc label secret x-cluster-test base=xc-pvc-migrator -n ${_cluster}
  fi
  
  # regenerate settings for deployment
  unset SETTINGS_LOADED
  genDepls.sh -c "${_profile}"-pvc-migrator -n "${_context}"

  printStatusMsg "Monitor the deployment in ${_cluster} console and press ENTER after it completes:"
  read

}


targetDeploy(){
  _context=${1}
  _cluster=${2}
  
  deployToCluster ${_context} ${_cluster} "target"

  MIG_TOKEN_SECRET=`oc get secret | grep target-pvc-migrator-token | head -1 | awk '{print $1}'`

  # Use token value to generate local temp secret
  oc create secret generic x-cluster-test --from-literal=token=`oc get secret ${MIG_TOKEN_SECRET} -o json | jq -r .data.token | base64 -d` --dry-run -o json > tmp.secret
}

sourceDeploy(){
  _context=${1}
  _contextDst=${2}
  _cluster=${3}
  #swtich to source cluster -------------------
  printStatusMsg "Switching to destiantion cluster"
  oc config use-context ${_contextDst}

  #grab the target pod name
  MIG_POD_TARGET=$(oc get pods | grep target-pvc-migrator | awk '{print $1}')

  deployToCluster ${_context} ${_cluster} "source"

  MIG_POD=$(oc get pods | grep source-pvc-migrator | awk '{print $1}')

  #runInContainer doesn't allow us to specify -n or our env, we have to use this instead
  oc exec -n ${_cluster} -it "${MIG_POD}" -- bash -c "cd /source; oc rsync --compress=true --kubeconfig=/target/tkube/KUBECONFIG . ${MIG_POD_TARGET}:/target"
}

migrate(){
    targetDeploy ${DST_CONTEXT} ${DST_CLUSTER}
    sourceDeploy ${SRC_CONTEXT} ${DST_CONTEXT} ${SRC_CLUSTER}
}

cleanEnv(){
  _profile=${1}
  if [ ! -z ${_profile} ] && [ "${_profile}" = "target" ]; then
    _context=${DST_CONTEXT}
  elif [ ! -z ${_profile} ] && [ "${_profile}" = "source" ]; then
    _context=${SRC_CONTEXT}
  else
    printStatusMsg "Please either specifiy target or source profile"
    exit
  fi

  printStatusMsg "Cleaning secrets, deployments, builds, etc"

  # make sure we're using the destination context
  printStatusMsg "Switching to destination cluster"
  oc config use-context ${_context}

  oc delete -l base=xc-pvc-migrator deployment,sa,rolebinding,secret
  oc delete -l app=pvc-migrator build,buildconfig,is
  oc delete -l app=pvc-migrator-nsp nsp

  if [ -f "tmp.secret" ] && [ "${_profile}" = "target" ]; then
    rm "tmp.secret"
  fi
}

cleanAllEnv(){
  cleanEnv "target"
  cleanEnv "source"
}


# pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  init)
    initialize
    ;;
  migrate)
    migrate
    ;;
  clean)
    cleanAllEnv
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

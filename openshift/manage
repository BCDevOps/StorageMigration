#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  A script to automate and manage the migration of files from one PVC to another of the same name within a given environment.

  Steps:
    - Initialize the PVC migrator environment using the 'init' command.
    - Deploy the build configuration using the 'build' command.
    - Migrate your PVC(s) using the 'migrate' command.
    - Remove the PVC migrator components from your environment(s) using the 'clean' command.

  Usage:
    $0 [options] [commands]

  Examples:
    $0 -n devex-von-image init
    $0 -n devex-von-image -r https://github.com/WadeBarnes/StorageMigration.git init

    $0 -e tools migrate jenkins jenkins-data gluster-block 5Gi

  Options:
  ========
    -n Project namespace, the name of the target project minus the environment suffix (-tool, -dev, -test, -prod).
       Used by the 'init' command to set the target project for all subsequent operations.

    -r Optional - GitHub repository URL
       Used by the 'init' command to set the GitHub for repository for all subsequent build operations.
       Only used for build operations to redirect the source repository to another fork.

    -b Optional - Git Branch
       Used by the 'init' command to set the branch of the repository for all subsequent build operations.
       Only used for build operations to redirect the source repository to another branch of a fork.

  Commands:
  ========
    init
      - Initialize the PVC migrator environment for your project environment.
        Specify your project namespace using the -n option.

    build
      - Deploy the PVC migrator build configuration.

    scaleDown
      - Scale down one or more pods.
        For example;
          $0 -e dev scaleDown django

    scaleUp
      - Scale up one or more pods.
        For example;
          $0 -e dev scaleUp django

    migrate <hostPodName> <pvcName> <pvcType> <pvcSize>
      - Migrate files from one PVC to another of the same name.
        Good for migrating from one storage class to another, or to a new PVC of a different size.

      - Required parameters:
        - hostPodName: The friendly name of the host pod.  Typically, this is the same as the deployment configuration name.
        - pvcName: The name of the PVC to be migrated.
        - pvcType: The PVC class to use for the new PVC.  One of gluster-file, gluster-block, or gluster-file-db.
        - pvcSize: The size, in Gi, for the new PVC, e.g. 1Gi, 2Gi, 5Gi

    copy <sourcePvcName> <targetPvcName>
      - Copy files from one existing PVC to another exiting PVC.

      - Required parameters:
        - sourcePvcName: The name of the existing source PVC.
        - targetPvcName: The name of the existing target PVC.

    clean
      - Remove the PVC migrator components from a given environment.
        Specify the environment using the -e option.

EOF
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------

# Default:
# All of the commands rely on local setting and parameters.
export APPLY_LOCAL_SETTINGS=1

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :n:r:b: FLAG; then
    case ${FLAG} in
      # List of local options:
      n) PROJECT_NAMESPACE=$OPTARG ;;
      r) GIT_URI=$OPTARG ;;
      b) GIT_REF=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------

# An empty settings.local.sh is required for the scripts to run correctly during the first run.
# If no settings.local.sh is provided, the initialization above will fail due to 
# the environment variable APPLY_LOCAL_SETTING set to 1.
# Similarly, if the environment variable is not set, the initialize script will NOT
# correctly create the local settings file
touch settings.local.sh

# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi


# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
migrate(){
  (
    _hostName=${1}
    _migratorPodName=${2}
    _pvcName=${3}
    _tmpPvcName=${_pvcName}-tmp
    _pvcType=${4}
    _pvcSize=${5}
    _namespace=$(getProjectName)

    printAndAskToContinue "Migration settings:\n  Project: ${_namespace}\n  Host: ${_hostName}\n  PVC to Migrate: ${_pvcName}\n  New PVC Type: ${_pvcType}\n  New PVC Size: ${_pvcSize}\n"

    # Scale down the host pod
    scaleDown ${_hostName}
    printAndWait "Wait for the ${_hostName} pod to completely shut down before continuing."

    # Create the tmp PVC
    createPVC "${_tmpPvcName}" "${_pvcType}" "${_pvcSize}" "${_hostName}"
    printAndWait "Wait for the ${_tmpPvcName} PVC to be created before continuing."

    # Deploy the migrator pod
    updateMigratorDeplymentParams "./templates/pvc-migrator-deploy.local.param" "${_pvcName}" "${_tmpPvcName}" "latest"
    deployMigrator ${_migratorPodName}
    scaleUp ${_migratorPodName}
    printAndWait "Wait for the ${_migratorPodName} pod to completely startup before continuing."

    # Copy the files
    syncPVCs "${_migratorPodName}" "/source/" "/target/"
    printAndWait "Review the logs and ensure there were no errors before continuing."

    # Scale down the migrator pod
    scaleDown ${_migratorPodName}
    printAndWait "Wait for the ${_migratorPodName} pod to completely shut down before continuing."

    # Delete the original PVC
    deletePVC "${_pvcName}"
    printAndWait "Wait for the ${_pvcName} to be completely deleted before continuing."

    # Create the new PVC
    createPVC "${_pvcName}" "${_pvcType}" "${_pvcSize}" "${_hostName}"
    printAndWait "Wait for the new ${_pvcName} PVC to be created before continuing."

    # Reconfigure/redeploy the migrator pod
    scaleUp ${_migratorPodName}
    printAndWait "Wait for the ${_migratorPodName} pod to completely startup before continuing."

    # Copy the files to the new PVC
    syncPVCs "${_migratorPodName}" "/target/" "/source/"
    printAndWait "Review the logs and ensure there were no errors before continuing."

    # Scale down the migrator pod
    scaleDown ${_migratorPodName}
    printAndWait "Wait for the ${_migratorPodName} pod to completely shut down before continuing."

    # Scale the host pod up
    scaleUp ${_hostName}
    printAndWait "Wait for the ${_hostName} pod to completely startup before continuing.  If there are issues cancel (Ctrl-C) the script."

    echoWarning "Cleaning up ..."

    # Delete the tmp PVC
    deletePVC "${_tmpPvcName}"

    echoWarning "\nPVC migration complete."
  )
}

copy(){
  (
    _migratorPodName=${1}
    _sourcePvcName=${2}
    _targetPvcName=${3}
    _namespace=$(getProjectName)

    printAndAskToContinue "Copy settings:\n  Project: ${_namespace}\n  Source PVC: ${_sourcePvcName}\n  Target PVC: ${_targetPvcName}\n"
    printAndWait "Make sure there are no running pods connected to the source and target PVCs."

    # Deploy the migrator pod
    updateMigratorDeplymentParams "./templates/pvc-migrator-deploy.local.param" "${_sourcePvcName}" "${_targetPvcName}" "latest"
    deployMigrator ${_migratorPodName}
    scaleUp ${_migratorPodName}
    printAndWait "Wait for the ${_migratorPodName} pod to completely startup before continuing."

    # Copy the files
    syncPVCs "${_migratorPodName}" "/source/" "/target/"
    printAndWait "Review the logs and ensure there were no errors before continuing."

    # Scale down the migrator pod
    scaleDown ${_migratorPodName}
    printAndWait "Wait for the ${_migratorPodName} pod to completely shut down before continuing."

    echoWarning "\nCopy complete."
  )
}

updateMigratorDeplymentParams() {
  (
    _paramFile=${1:-./templates/pvc-migrator-deploy.local.param}
    _sourcePvc=${2}
    _targetPvc=${3}
    _imageTag=${4:-"latest"}

    # Uncomment the required deployment settings ...
    _parameterFilters="/TAG_NAME/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/SOURCE_IMAGE_NAMESPACE/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/SOURCE_PVC/s~^#.~~;"
    _parameterFilters="${_parameterFilters}/TARGET_PVC/s~^#.~~;"
    _parameterFilters="${_parameterFilters}s~\(^TAG_NAME=\).*$~\1${_imageTag}~;"
    _parameterFilters="${_parameterFilters}s~\(^SOURCE_PVC=\).*$~\1${_sourcePvc}~;"
    _parameterFilters="${_parameterFilters}s~\(^TARGET_PVC=\).*$~\1${_targetPvc}~;"

    cat ${_paramFile} | sed ${_parameterFilters} > ${_paramFile}.tmp
    rm ${_paramFile}
    mv ${_paramFile}.tmp ${_paramFile}
  )
}

deployMigrator(){
  (
    _migratorName=${1:-pvc-migrator}

    # Deploy or update the configuration ...
    if dcExists ${_migratorName}; then
      genDepls.sh -u -l
    else
      genDepls.sh -l
    fi 

    oc rollout latest dc/${_migratorName} -n $(getProjectName)
  )
}

deleteMigrator()
{
  (
    _migratorName=${1:-pvc-migrator}

    oc -n $(getProjectName) delete all -l app=${_migratorName}
  )
}

deletePVC(){
  {
    _pvcName=${1}
    _namespace=$(getProjectName)
    if [ -z "${_pvcName}" ]; then
      echo -e \\n"deletePVC; Missing parameter!"\\n
      exit 1
    fi

    printAndAskToContinue "If you contiune the ${_pvcName} PVC will be perminently deleted.  All data on the PVC will be lost."
    oc -n ${_namespace} delete pvc ${_pvcName}
  }
}

createPVC(){
  (
    _pvcName=${1}
    _pvcType=${2}
    _pvcSize=${3}
    _appName=${4}
    _namespace=$(getProjectName)

    if [ -z "${_appName}" ] || [ -z "${_pvcName}" ] || [ -z "${_pvcType}" ] || [ -z "${_pvcSize}" ]; then
      echo -e \\n"createPVC; Missing parameter!"\\n
      exit 1
    fi

    oc -n ${_namespace} process --filename=./templates/pvc-template.json \
               NAME=${_appName} \
               PERSISTENT_VOLUME_NAME=${_pvcName} \
               PERSISTENT_VOLUME_CLASS=${_pvcType} \
               PERSISTENT_VOLUME_SIZE=${_pvcSize} \
               > pvc-deployment.json

    oc -n ${_namespace} create -f pvc-deployment.json
    rm pvc-deployment.json
  )
}

syncPVCs(){
  (
    _migratorPodName=${1}
    _source=${2:-"/source/"}
    _target=${3:-"/target/"}

    if [ -z "${_migratorPodName}" ]; then
      echo -e \\n"syncPVCs; Missing parameter!"\\n
      exit 1
    fi

    echo
    runInContainer -v \
    ${_migratorPodName} \
    "/migrate -y -s ${_source} -t ${_target}"
  )
}

deploymentEnvNameSet() {
  if [ ! -z "${DEPLOYMENT_ENV_NAME}" ]; then
    return 0
  else
    return 1
  fi
}

projectNamespaceSet() {
  if [ ! -z "${PROJECT_NAMESPACE}" ] && [ "bcgov" != "${PROJECT_NAMESPACE}" ]; then
    return 0
  else
    return 1
  fi
}

requireProjectNamespace(){
  _red='\033[0;31m'
  _nc='\033[0m' # No Color

  # Deployment Environment Name
  if ! projectNamespaceSet; then
    echo
    echo -e "${_red}You MUST specify a project namespace using the '-n' flag.${_nc}"
    globalUsage
    exit 1
  fi
}

requireDevelopmentEnvName(){
  _red='\033[0;31m'
  _nc='\033[0m' # No Color

  # Deployment Environment Name
  if ! deploymentEnvNameSet; then
    echo
    echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
    echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
    globalUsage
    exit 1
  fi
}

initialize(){
  echo -e "\nInitializing environment settings ...\n"

  # Write a local settings file ...
  echo "Writing local settings file (settings.local.sh) ..."
  echo "export PROJECT_NAMESPACE=${PROJECT_NAMESPACE}" > settings.local.sh
  echo "export GIT_URI=${GIT_URI}" >> settings.local.sh
  echo "export GIT_REF=${GIT_REF}" >> settings.local.sh

  # Generate local params files ...
  echo "Generating local param files ..."
  genTemplateParams.sh -lf

  echo "Environment settings:"
  echo "  Project namespace: ${PROJECT_NAMESPACE}"
  echo "  Source Repository (used for optional builds): ${GIT_URI}"
  echo "  Source branch (used for optional builds): ${GIT_REF}"
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  init)
    requireProjectNamespace
    initialize
    ;;

  build)
    echoWarning "\nDeploying the PVC Migrator build configuration.\nPlease wait for the build to complete before running any other command."
    genBuilds.sh -l
    ;;

  clean)
    migratorName=${1:-pvc-migrator}
    requireDevelopmentEnvName
    deleteMigrator ${migratorName}
    ;;

  scaleup)
    requireDevelopmentEnvName
    scaleUp ${@}
    ;;

  scaledown)
    requireDevelopmentEnvName
    scaleDown ${@}
    ;;

  migrate)
    hostPodName=${1}
    pvcName=${2}
    pvcType=${3}
    pvcSize=${4}
    migratorName=${5:-pvc-migrator}

    if [ -z "${hostPodName}" ] || [ -z "${pvcName}" ] || [ -z "${pvcType}" ] || [ -z "${pvcSize}" ]; then
      echoWarning "\n${_cmd}; Missing one or more required parameters."
      globalUsage
      exit 1
    fi

    requireDevelopmentEnvName
    migrate "${hostPodName}" "${migratorName}" "${pvcName}" "${pvcType}" "${pvcSize}"
    ;;

  copy)
    sourcePvcName=${1}
    targetPvcName=${2}
    migratorName=${3:-pvc-migrator}

    if [ -z "${sourcePvcName}" ] || [ -z "${targetPvcName}" ]; then
      echoWarning "\n${_cmd}; Missing one or more required parameters."
      globalUsage
      exit 1
    fi

    requireDevelopmentEnvName
    copy "${migratorName}" "${sourcePvcName}" "${targetPvcName}"
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null
